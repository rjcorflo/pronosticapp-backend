<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Community;
use AppBundle\Entity\GeneralClassification;
use AppBundle\Entity\Matchday;
use Doctrine\ORM\EntityRepository;

/**
 * GeneralClassificationRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GeneralClassificationRepository extends EntityRepository
{
    /**
     * Find classification for community.
     *
     * @param Community $community
     * @return GeneralClassification[]
     */
    public function findByCommunity(Community $community): array
    {
        $this->findBy(['community' => $community]);
    }

    /**
     * Find classifications for community only until next matchday (or actual).
     * If a date is passed, only modified records after that date are returned.
     *
     * @param Community $community
     * @param Matchday $nextMatchday
     * @param \DateTime|null $date
     * @return array
     */
    public function findByCommunityUntilNextMatchdayModifiedAfterDate(
        Community $community,
        Matchday $nextMatchday,
        \DateTime $date = null
    ): array
    {
        $queryBuilder = $this->createQueryBuilder('g');
        $queryBuilder
            ->where($queryBuilder->expr()->eq('g.community', ':community'))
            ->andWhere($queryBuilder->expr()->eq('g.matchday', ':matchday'));

        if ($date !== null) {
            $queryBuilder
                ->andWhere($queryBuilder->expr()->gt('g.updated', ':date'))
                ->setParameter('date', $date);
        }

        $queryBuilder
            ->orderBy('g.position', 'ASC')
            ->setParameters([
               'community' => $community,
               'matchday' => $nextMatchday
            ]);

        $matches = $queryBuilder->getQuery()->getResult();
        return $matches;
    }

    /**
     * Return classification for one community and one matchday.
     *
     * @param Matchday $matchday
     * @param Community $community
     * @return GeneralClassification[]
     */
    public function findOrderedByMatchdayAndCommunity(
        Matchday $matchday,
        Community $community
    ): array
    {
        $classifications = $this->findBy(
            ['community' => $community, 'matchday' => $matchday],
            [
                'totalPoints' => 'DESC',
                'hitsTenPoints' => 'DESC',
                'hitsFivePoints' => 'DESC',
                'hitsThreePoints' => 'DESC',
                'hitsTwoPoints' => 'DESC',
                'hitsOnePoints' => 'DESC',
                'hitsNegativePoints' => 'ASC'
            ]
        );

        return $classifications;
    }

    /**
     * Return ids of matchdays with general classifications registers updated after date.
     *
     * @param Community $community
     * @param \DateTime $date
     * @return Matchday[]
     */
    public function findMatchdaysWithGeneralClassificationUpdatedAfterDate(
        Community $community,
        \DateTime $date = null
    ): array
    {
        $queryBuilder = $this->createQueryBuilder('g');
        $queryBuilder
            ->select('DISTINCT(m) AS id')
            ->innerJoin('g.matchday', 'm')
            ->where($queryBuilder->expr()->eq('g.community', ':community'))
            ->setParameter('community', $community);

        if ($date !== null) {
            $queryBuilder
                ->andWhere($queryBuilder->expr()->gt('g.updated', ':date'))
                ->setParameter('date', $date);
        }

        $results = $queryBuilder->getQuery()->getResult();

        $repo = $this->getEntityManager()->getRepository(Matchday::class);

        $matchdays = [];
        foreach ($results as $id) {
            $matchdays[] = $repo->find($id);
        }

        return $matchdays;
    }
}
