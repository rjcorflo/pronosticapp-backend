<?php

namespace App\Repository;

use App\Entity\Community;
use App\Entity\Match;
use App\Entity\Matchday;
use App\Legacy\Model\Exception\PronosticAppException;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;

/**
 * MatchdayRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchdayRepository extends EntityRepository
{
    /**
     * Get matchday of next match after date.
     *
     * @param \DateTime|null $date
     * @return Matchday|null
     * @throws PronosticAppException    If there is no matchday.
     */
    public function getNextMatchday(\DateTime $date = null): ?Matchday
    {
        if ($date === null) {
            $filterDate = new \DateTime();
        } else {
            $filterDate = $date;
        }

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder
            ->select('m')
            ->from('App:Match', 'm')
            ->where($queryBuilder->expr()->gt('m.startTime', ':date'))
            ->orderBy('m.startTime', 'ASC')
            ->setMaxResults(1)
            ->setParameter('date', $filterDate, Type::DATETIME);

        $match = $queryBuilder->getQuery()->getOneOrNullResult();

        // If no there are no match after date, get matchday of last match
        if ($match === null) {
            /** @var Matchday | null $matchday */
            $matchday = $this->getLastMatchday($date);
            return $matchday;
        }

        return $match->getMatchday();
    }

    /**
     * Get matchday of last played/started match.
     *
     * @param \DateTime|null $date
     * @return Matchday
     * @throws PronosticAppException    If there is no matchday.
     */
    public function getLastMatchday(\DateTime $date = null): Matchday
    {
        if ($date === null) {
            $filterDate = new \DateTime();
        } else {
            $filterDate = $date;
        }

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder
            ->select('m')
            ->from('App:Match', 'm')
            ->innerJoin('m.matchday', 'ma')
            ->where($queryBuilder->expr()->lt('m.startTime', ':date'))
            ->groupBy('ma.id')
            ->orderBy('m.startTime', 'DESC')
            ->setMaxResults(1)
            ->setParameter('date', $filterDate, Type::DATETIME);

        /** @var Match $match */
        $match = $queryBuilder->getQuery()->getOneOrNullResult();

        // If there are no matches before date, return first matchday.
        if ($match === null) {
            /** @var Matchday | null $matchday */
            $matchday = $this->findOneBy([], ['id', 'ASC']);

            // If there is no matchday, throw exception
            if ($matchday === null) {
                $e = new PronosticAppException();
                $e->addDefaultMessage('No existen Jornadas');
                throw $e;
            }

            return $matchday;
        } else {
            return $match->getMatchday();
        }
    }


    /**
     * Find all matchdays until next matchday (included).
     *
     * If next (or actual) matchday is Jornada 3, returns Jornada 3 and all before it.
     *
     * @return Matchday[]
     */
    public function findAllUntilNextMatchday(): array
    {
        $nextMatchday = $this->getNextMatchday();

        $queryBuilder = $this->createQueryBuilder('m');
        $queryBuilder
            ->where($queryBuilder->expr()->lte('m.matchdayOrder', ':order'))
            ->setParameter('order', $nextMatchday->getMatchdayOrder());

        /** @var Matchday[] $matchdays */
        $matchdays = $queryBuilder->getQuery()->getResult();

        return $matchdays;
    }


    /**
     * Return all matchdays ordered by matchdayOrder field.
     *
     * @return Matchday[]
     */
    public function findAllOrdered(): array
    {
        $matchdays = $this->findBy([], ['matchdayOrder' => 'ASC']);

        return $matchdays;
    }

    /**
     * Find matchdays for community updated after date (or all if no date is passed).
     *
     * @param Community $community
     * @param \DateTime|null $date
     * @return Matchday[]
     */
    public function findByCommunity(Community $community, \DateTime $date = null): array
    {
        $queryBuilder = $this->createQueryBuilder('m');

        if ($date !== null) {
            $queryBuilder->where($queryBuilder->expr()->gt('m.updated', ':date'))
                ->setParameter('date', $date, Type::DATETIME);
        }

        $queryBuilder->orderBy('m.matchdayOrder', 'ASC');

        $matchdays = $queryBuilder->getQuery()->getResult();

        return $matchdays;
    }

    /**
     * Retrieve all matchdays between two of them.
     *
     * Example: Return Jornada 2, Jornada 3 y Jornada 4 when passed Jornada 2 and Jornada 4 as parameters
     *
     * @param Matchday  $initial
     * @param Matchday  $finish
     * @return mixed
     */
    public function findAllBetweenMatchdays(Matchday $initial, Matchday $finish)
    {
        $queryBuilder = $this->createQueryBuilder('m');
        $queryBuilder
            ->where($queryBuilder->expr()->gte('m.matchdayOrder', '?1'))
            ->andWhere($queryBuilder->expr()->lte('m.matchdayOrder', '?2'))
            ->setParameters([1 => $initial->getMatchdayOrder(), 2 => $finish->getMatchdayOrder()]);

        $matchdays = $queryBuilder->getQuery()->getResult();

        return $matchdays;
    }
}
