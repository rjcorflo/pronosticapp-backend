<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Community;
use AppBundle\Entity\Player;
use AppBundle\Legacy\Model\Exception\NotFoundException;
use AppBundle\Legacy\Util\General\ErrorCodes;
use Doctrine\Common\Collections\Criteria;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;

/**
 * CommunityRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityRepository extends EntityRepository
{
    /**
     * Count by criteria.
     *
     * TODO remove
     * @param array $criteria
     * @return int
     */
    public function countBy(array $criteria)
    {
        return $this->getEntityManager()->getUnitOfWork()->getEntityPersister($this->getEntityName())->count($criteria);
    }

    /**
     * Check if a community name exists.
     *
     * @param string $name
     * @return bool
     */
    public function checkIfNameExists(string $name) : bool
    {
        $queryBuilder = $this->createQueryBuilder('c');
        $queryBuilder
            ->select('COUNT(c.id)')
            ->where($queryBuilder->expr()->eq(
                $queryBuilder->expr()->lower('c.name'),
                $queryBuilder->expr()->lower(':name')
            ))
            ->setParameter('name', $name, Type::STRING);
        return $queryBuilder->getQuery()->getSingleScalarResult() > 0;
    }

    /**
     * Find community by exact name.
     *
     * @param string $name
     * @return Community
     * @throws NotFoundException If there is no communities with that name
     */
    public function findByName(string $name): Community
    {
        /** @var Community $community */
        $community = $this->findOneBy(['name' => $name]);

        if ($community === null) {
            $exception = new NotFoundException();
            $exception->addMessageWithCode(
                ErrorCodes::ENTITY_NOT_FOUND,
                'No existe una comunidad con ese nombre'
            );

            throw $exception;
        }

        return $community;
    }

    /**
     * Get all public communities.
     *
     * If a player is passed, retrieve all public communities to which player is not a member.
     *
     * @param Player $player
     * @return Community[]
     */
    public function getAllPublicCommunities(Player $player = null) : array
    {
        if ($player === null) {
            /** @var Community[] $communities */
            $communities = $this->findBy(['private' => false], ['name' => 'ASC']);
        } else {
            $query = $this->getEntityManager()->createQuery(
                'SELECT c FROM AppBundle:Community c
                  WHERE c.private = 0
                    AND c.id NOT IN (SELECT com.id
                                       FROM AppBundle:Participant p
                                       JOIN p.community com
                                      WHERE p.player = :player_id)'
            )->setParameter('player_id', $player->getId());

            /** @var Community[] $communities */
            $communities = $query->getResult();
        }

        return $communities;
    }

    /**
     * Retrieve a random community.
     *
     * If a player is passed, retrieve random community to which player is not member.
     *
     * @param Player|null $player
     * @return Community
     * @throws NotFoundException
     */
    public function getRandomCommunity(Player $player = null): Community
    {
        if ($player === null) {
            /** @var Community $community */
            $community = $this->findOneBy(['private' => false], ['created' => 'ASC']);
        } else {
            $query = $this->getEntityManager()->createQuery(
                'SELECT c FROM AppBundle:Community c
                  WHERE c.private = 0
                    AND c.id NOT IN (SELECT com.id
                                       FROM AppBundle:Participant p
                                       JOIN p.community com
                                      WHERE p.player = :player_id)
                  ORDER BY c.created ASC
                '
            )->setMaxResults(1)
                ->setParameter('player_id', $player->getId());

            /** @var Community $community */
            $community = $query->getOneOrNullResult();
        }

        if ($community === null) {
            $exception = new NotFoundException();
            $exception->addMessageWithCode(
                ErrorCodes::CANNOT_RETRIEVE_RANDOM_COMMUNITY,
                'No se ha podido recuperar una comunidad aleatoria'
            );

            throw $exception;
        }

        return $community;
    }
}
