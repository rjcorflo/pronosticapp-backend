<?php

namespace App\Repository;

use App\Entity\Community;
use App\Entity\GeneralClassification;
use App\Entity\Matchday;
use Doctrine\ORM\EntityRepository;

/**
 * GeneralClassificationRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GeneralClassificationRepository extends EntityRepository
{
    /**
     * Return classification for one community and one matchday.
     *
     * @param Matchday $matchday
     * @param Community $community
     * @return GeneralClassification[]
     */
    public function findOrderedByMatchdayAndCommunity(
        Matchday $matchday,
        Community $community
    ): array {
        $classifications = $this->findBy(
            ['community' => $community, 'matchday' => $matchday],
            [
                'totalPoints' => 'DESC',
                'hitsTenPoints' => 'DESC',
                'hitsFivePoints' => 'DESC',
                'hitsThreePoints' => 'DESC',
                'hitsTwoPoints' => 'DESC',
                'hitsOnePoints' => 'DESC',
                'hitsNegativePoints' => 'ASC'
            ]
        );

        return $classifications;
    }

    /**
     * Return ids of matchdays with general classifications registers updated after date.
     *
     * @param Community $community
     * @param \DateTime $date
     * @return Matchday[]
     */
    public function findMatchdaysWithGeneralClassificationUpdatedAfterDate(
        Community $community,
        \DateTime $date = null
    ): array {
        $queryBuilder = $this->createQueryBuilder('g');
        $queryBuilder
            ->select('DISTINCT(m) AS id')
            ->innerJoin('g.matchday', 'm')
            ->where($queryBuilder->expr()->eq('g.community', ':community'))
            ->setParameter('community', $community);

        if ($date !== null) {
            $queryBuilder
                ->andWhere($queryBuilder->expr()->gt('g.updated', ':date'))
                ->setParameter('date', $date);
        }

        $results = $queryBuilder->getQuery()->getResult();

        $repo = $this->getEntityManager()->getRepository(Matchday::class);

        $matchdays = [];
        foreach ($results as $id) {
            $matchdays[] = $repo->find($id);
        }

        return $matchdays;
    }
}
